default:
  image: node:17.3.1

stages:
  - test
  - build
  - deploy

.runs-only: &run_only
  only:
    refs:
      - main

lint-test:
  stage: test
  script:
    - npm install
    - npm audit fix
    - npm run stylelint
    - npm run eslint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_MESSAGE != null

.build-image-base: &build-image-base
  image: docker:20-dind
  stage: build
  services:
    - name: docker:20-dind
      alias: docker
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  when: on_success

build-image:
  <<: *build-image-base
  rules:
    - if: '$CI_COMMIT_BRANCH != "main"'
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:latest" .

build-image-prod:
  <<: *build-image-base
  <<: *run_only
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:latest"

deploy:
  <<: *run_only
  stage: deploy
  variables:
    CLEAR_COMMAND: $(docker image ls -f 'dangling=true' -q)
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_KEY")
    - mkdir -p ~/.ssh
    - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - echo $SSH_HOST
    - echo "ssh $SSH_HOST 'cd ~/checklist;
      docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com;
      docker pull "$CI_REGISTRY_IMAGE:latest";
      docker-compose stop frontend;
      docker-compose rm frontend;
      docker-compose up -d frontend;
      docker image rmi $CLEAR_COMMAND;'
      " > docker
    - eval $(cat docker)
  when: on_success
